@page "/"
@using System.Collections.ObjectModel
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<h1>Hello, Blazor InputChips!</h1>

<div class="samples">

	<label>Default (no backing field)</label>
	<InputChips autofocus placeholder="add a tag"
				SortChips="true" />

	<label>Bind to property</label>
	<InputChips @bind-Chips="Chips"
				placeholder="add a tag"
				SortChips="true" />

	<label>Bind to observable collection</label>
	<InputChips @bind-Chips="ObservableChips"
				placeholder="add a tag"
				EnableBackspaceRemove="true"
				SortChips="true" />
	<p>@message</p>

	<label>Use SPACE to submit tags</label>
	<InputChips placeholder="add a tag"
				SubmitChipOnChar="' '" />

	<label>Use BACKSPACE to delete tags</label>
	<InputChips placeholder="add a tag"
				EnableBackspaceRemove="true" />

	<label>Allow duplicates</label>
	<InputChips placeholder="add a tag"
				AllowDuplicates="true" />

	<label>Limit tag min (3) & max (12) length</label>
	<InputChips placeholder="add a tag"
				MinChipLen="3" MaxChipLen="12" />

	<label>Limit min/max length and use &lt;ul&gt; for errors</label>
	<InputChips placeholder="add a tag"
				MinChipLen="3" MaxChipLen="12"
				UseUnorderedListForErrors="true" />

	<label>Custom validation</label>
	<InputChips @bind-Chips="CustomValidateChips"
				placeholder="will not accept any :-)"
				OnCustomValidate="CustomValidateChipsCollection" />

	<label>Readonly mode</label>
	<InputChips @bind-Chips="ReadonlyChips"
				ReadOnly="true" />

	<label>Readonly mode, allow delete</label>
	<InputChips @bind-Chips="DeleteReadonlyChips"
				ReadOnly="true"
				AllowDeleteWhenReadOnly="true" />

	<EditForm method="post"
			  Model="this.Input"
			  OnValidSubmit="SubmitValidForm">
		<label>ENTER key will not cause form to submit!</label>
		<InputChips @bind-Chips="this.Input.Chips" autocomplete="off" autofill="off" />
		<button type="submit">Save</button>
	</EditForm>

</div>

@code {
	private ICollection<string> Chips { get; set; } = [];

	private ICollection<string> ObservableChips { get; set; } = new ObservableCollection<string>();

	private ICollection<string> CustomValidateChips { get; set; } = new List<string>();

	private ICollection<string> ReadonlyChips { get; set; } = ["Jane", "June", "Janet"];

	private ICollection<string> DeleteReadonlyChips { get; set; } = ["Jane", "June", "Janet", "Jack"];

	private string? message;


	protected override void OnInitialized()
	{
		base.OnInitialized();

		((ObservableCollection<string>) this.ObservableChips).CollectionChanged +=
			(s, e) =>
			{
				var count = this.ObservableChips.Count;
				message = $"Observable collection has {count} item(s); updated at {DateTime.Now.TimeOfDay}";
			};
	}


	private void CustomValidateChipsCollection(ChipValidationArgs args)
	{
		if (args.Chips.Count >= 0)
		{
			args.ValidationErrors.Add("I don't like it!");
		}
	}

	private void SubmitValidForm()
	{
		NavigationManager.NavigateTo("/submitted-form");
	}

	private InputModel Input = new();

	private class InputModel
	{
		public ICollection<string> Chips { get; set; } = [];
	}
}
